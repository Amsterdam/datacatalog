{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://localhost:8000/datacatalog-core",
      "description": "an example data catalog",
      "variables": {}
    },
    {
      "url": "https://api.datapunt.amsterdam.nl/dcat/",
      "description": "Amsterdams data catalog"
    }
  ],
  "info": {
    "title": "Datacatalog-Core",
    "contact": {
      "name": "Datapunt Amsterdam",
      "url": "https://data.amsterdam.nl/",
      "email": "datapunt@amsterdam.nl"
    },
    "version": "0.0.1",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0/"
    },
    "description": "First attempt at creating an openapi 3.0 spec for the new data catalog."
  },
  "paths": {
    "/action/{action}": {
      "get": {
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "enum": [
              "package_show",
              "package_list",
              "package_search"
            ]
          }
        ],
        "operationId": "someOperationId",
        "responses": {
          "200": {
            "description": "Description"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NewSchema": {
        "type": "object",
        "parameters": {
          "foo": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "page": {
        "name": "page",
        "in": "query",
        "description": "The page number to return. Requires the `items` parameter. The first page has number 1.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^[1-9]\\\\d*$"
        }
      },
      "items": {
        "name": "page_items",
        "in": "query",
        "description": "The maximum number of items to return in one response.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^(?:0|[1-9]\\\\d*)$"
        }
      },
      "embed": {
        "name": "embed",
        "in": "query",
        "description": "Linked resources to embed.  For example: `foo(bar,baz())`.  This would embed all resources with link relation `foo`.\n* In these `foo`-resources, all resources of link types `bar` and `baz`\n  will be embedded.\n\n* In the `bar` resource(s), the default embedding will occur.\n* In the `baz` resource(s), no embedding will occur.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^(?:,?[a-z_]\\\\w*|,?\\\\)|\\\\()+$"
        }
      },
      "if-match-OPTIONAL": {
        "name": "If-Match",
        "description": "This request header is required if the client intends to *update* an existing `account` resource.  The value *must* be the current `ETag` of the account resource, as last seen by the client.  This prevents lost updates if multiple clients are concurrently editing the same resource.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^(?:W/)?\"[^\"]+\"$"
        }
      },
      "if-match-REQUIRED": {
        "name": "If-Match",
        "description": "This request header is required if the client intends to *update* an existing `account` resource.  The value *must* be the current `ETag` of the account resource, as last seen by the client.  This prevents lost updates if multiple clients are concurrently editing the same resource.",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(?:W/)?\"[^\"]+\"$"
        }
      },
      "if-none-match-GET": {
        "name": "If-None-Match",
        "description": "This request header can make the request conditional. You'll get a `304 Not Modified` if you're cached version is still up-to-date.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^(?:W/)?\"[^\"]+\"(?:\\\\s,\\\\s(?:W/)?\"[^\"]+\")*$"
        }
      },
      "if-none-match-PUT": {
        "name": "If-None-Match",
        "description": "This request header is required if the client intends to *create* a new `account` resource.  This prevents lost updates if multiple clients are concurrently creating the same resource.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "*"
          ]
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "Authorization through our own Authorization Service.  Scope names all start with `AUR`, which stands for **ADW User Roles**.",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://localhost:8000/authz_admin/authorization",
            "scopes": {
              "AUR/R": "Read account roles.",
              "AUR/W": "Create and edit account roles."
            }
          }
        }
      }
    },
    "links": {},
    "callbacks": {}
  },
  "externalDocs": {
    "description": "",
    "url": "https://amsterdam.github.io/datacatalog-core/"
  },
  "security": []
}