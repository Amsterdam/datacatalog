openapi: '3.0.0'


info:
  title: Data catalog
  version: '1.1.0'


paths:
  /harvest:
    get:
      description: >-
        Download the entire catalogue in one call.
      responses:
        200:
          description: All datasets, including their distributions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dcat-datasets'
  /datasets:
    get:
      description: >-
        Get a list of all datasets, optionally selected by a free-text query
        and/or facet filters. This endpoint supports paging using the
        limit parameter.

        Search for datasets concerned with jeugdzorg:
        ``GET /datasets?q=jeugdzorg``

        Get all datasets that have ``jeugdzorg`` as one of its themes:

        ``GET /datasets?/properties/dct:theme/items=in=jeugdzorg``

        Get all datasets that have ``jeugdzorg`` or ``ouderenzorg`` as one of
        their themes:

        ``GET /datasets?/properties/dct:theme/items=in=jeugdzorg,ouderenzorg``

        Get all datasets modified in January 2017:

        ``GET /datasets?/properties/dct:modified=ge=2017-01-01&/properties/dct:modified=lt=2017-01-31``
      responses:
        200:
          description: A list of datasets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasets-get'
      parameters:
      - name: q
        in: query
        description: Free-text query
        required: false
        schema:
          type: string
      - name: any_json_pointer
        in: query
        description: >-
          **This is a “pseudo-paramemeter”** OpenAPI3 doesn’t allow patterned
          parameters (yet). Instead, this entry serves as documentation for
          facet filtering parameters.

          Each facet filter is a ``key=value`` pair in the request query. The
          *key* consists of a syntactically valid JSON pointer. The *value*
          starts with one of the following comparators:

          -   ``eq=``: **equals:** True if at least one value matching the JSON
              pointer is equal to the provided ``value``.
          -   ``in=``: **in:** True if at least one value matching the JSON
              pointer is equal to at least one of the (comma separated) set of
              strings in the provided ``value``.
          -   ``ge=``: **greater than or equal to:** True if at least one value
              matching the JSON pointer is greater than or equal to the provided
              ``value``.
          -   ``le=``: **less than or equal to:** True if at least one value
              matching the JSON pointer is less than or equal to the provided
              ``value``.
          -   ``gt=``: **greater than:** True if at least one value
              matching the JSON pointer is greater than the provided
              ``value``.
          -   ``lt=``: **less than:** True if at least one value
              matching the JSON pointer is less than the provided
              ``value``.

          This comparator is then followed by a literal, or a comma-separated
          set of string if the comparator is ``in=``. So example key-value pairs
          are:

          ``/properties/dct:title=in=Hello,world`` The ``dct:title`` property must
          be either “Hello” or “world”.

          ``/properties/dct:title=eq=Hello%20world`` The ``dct:title`` property
          must be “Hello world”.
        required: false
        explode: true
        schema:
          oneOf:
          - type: string
            description: >-
              A string, if the comparator is one of ``=``, ``>``, or ``<``
          - type: string
              A set of strings, if the comparator is ``~``
            pattern: '^(/(~0|~1|[^/~<>=])+)+([<>]=|=[=<>~]).+$'
      - name: limit
        in: query
        description: Amount of results to return
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset in resultset
        required: false
        schema:
          type: integer
    post:
      description: >-
        Upload a new dataset and let the system generate an identifier.
      security:
      - OAuth2:
        - CAT/W
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dcat-dataset-post'
      responses:
        201:
          description: Created.
          headers:
            Etag:
              description: Etag of the newly created dataset.
              schema:
                $ref: '#/components/schemas/etag'
            Location:
              description: Location of the newly created dataset.
              schema:
                type: string
  /datasets/{id}:
    get:
      description: Get the dataset identified by id.
      responses:
        200:
          description: The dataset as a dcat document.
          headers:
            Etag:
              description: Etag of the dataset.
              schema:
                $ref: '#/components/schemas/etag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dcat-dataset-get'
        304:
          description: >-
            Not Modified: The document has an etag that equals one of the given
            etags in If-None-Match.
          headers:
            Etag:
              description: Etag of the dataset.
              schema:
                $ref: '#/components/schemas/etag'
      parameters:
      - name: If-None-Match
        description: >-
          This request header can be used to fetch content iff none of the
          given etags match.
        required: false
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
          minLength: 1
    put:
      description: Upload a dataset under the given ID.
      security:
      - OAuth2:
        - CAT/W
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          minLength: 1
      - name: If-Match
        description: >-
          This request header is required if the client intends to *update* an
          existing `dataset` resource.  The value *must* be the current `Etag`
          of the dataset resource, as last seen by the client.  This prevents
          lost updates if multiple clients are concurrently editing the same
          resource.
        required: false
        in: header
        schema:
          $ref: '#/components/schemas/etag'
      - name: If-None-Match
        description: >-
          This request header is required if the client intends to *create* a
          new `dataset` resource.  This prevents lost updates if multiple
          clients are concurrently creating the same resource.
        required: false
        in: header
        schema:
          type: string
          pattern: '^\*$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dcat-dataset-put'
      responses:
        201:
          description: The dataset was succesfully uploaded.
          headers:
            Etag:
              description: Etag of the newly created dataset.
              schema:
                $ref: '#/components/schemas/etag'
            Location:
              description: Location of the newly created dataset.
              schema:
                type: string
        204:
          description: >-
            The dataset was updated successfully.  The `Etag` response header
            contains the new Etag.
          headers:
            Etag:
              description: New Etag of the updated dataset.
              schema:
                $ref: '#/components/schemas/etag'
    delete:
      description: Remove the dataset under the given ID.
      security:
      - OAuth2:
        - CAT/W
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          minLength: 1
      - name: If-Match
        description: >-
          The value *must* be the current `Etag` of the dataset resource, as
          last seen by the client. This prevents lost updates if multiple
          clients are concurrently editing the same resource.
        required: true
        in: header
        schema:
          $ref: '#/components/schemas/etag'
      responses:
        204:
          description: No Content
  /files:
    post:
      description: >-
        Upload a dcat distribution.
      security:
      - OAuth2:
        - CAT/W
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                distribution:
                  type: string
                  format: binary
      responses:
        201:
          description: Created.
          headers:
            Location:
              description: Location of the uploaded distribution.
              schema:
                type: string
  /openapi:
    get:
      description: >-
        Get the OpenAPI specification.
      responses:
        200:
          description: Success.
  /system/health:
    get:
      description: >-
        System health.
      responses:
        200:
          description: Plain text description of current system status.


components:

  schemas:
    etag:
      type: string
      pattern: '^(?:W/)?"[^"]+"$'
    dcat-dataset-get:
      description: >-
        Intentionally left blank. Replaced by the actual schema at runtime.
    dcat-dataset-post:
      description: >-
        Intentionally left blank. Replaced by the actual schema at runtime.
    dcat-dataset-put:
      description: >-
        Intentionally left blank. Replaced by the actual schema at runtime.
    dcat-datasets:
      # TODO: This schema is not accurate.
      type: array
      items:
        $ref: '#/components/schemas/dcat-dataset-get'

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: '/oauth2/authorize'
          scopes:
            CAT/W: Administer the data catalog

